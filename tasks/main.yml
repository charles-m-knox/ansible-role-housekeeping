# SPDX-License-Identifier: MIT-0
---
# if you run many ansible jobs over time, this directory can get a bit polluted
- name: Clean up all lingering async jobs
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/.ansible_async"
    state: absent
  tags:
    - housekeeping

- name: Identify all systemd coredumps
  ansible.builtin.find:
    paths: /var/lib/systemd/coredump/
    file_type: any
  register: coredump_files
  become: true
  when:
    - ansible_service_mgr == 'systemd'
  tags:
    - housekeeping

- name: Delete all systemd coredumps
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ coredump_files.files }}"
  become: true
  when:
    - ansible_service_mgr == 'systemd'
  tags:
    - housekeeping

- name: Clean up excess system logs
  ansible.builtin.shell: "journalctl {{ journalctl_cleanup_args }}"
  become: true
  when:
    - ansible_service_mgr == 'systemd'
  tags:
    - housekeeping

- name: Clean up excess user logs
  ansible.builtin.shell: "journalctl --user {{ journalctl_cleanup_args }}"
  become: false
  when:
    - ansible_service_mgr == 'systemd'
  tags:
    - housekeeping

- name: Clean up all uninstalled cached packages
  ansible.builtin.shell: pacman -Sc --noconfirm
  become: true
  when:
    - ansible_pkg_mgr == 'pacman'
  tags:
    - housekeeping

- name: Clean up ALL cached packages
  ansible.builtin.shell: |
    set -o pipefail
    printf "y\ny\n" | pacman -Scc
  become: true
  when:
    - ansible_pkg_mgr == 'pacman'
    - pacman_clean_all_cached_packages
  tags:
    - housekeeping

- name: Run user-scoped host-specific housekeeping scripts
  ansible.builtin.shell: "{{ housekeeping_user_scope_script }}"
  register: housekeeping_user_scope_script_result
  changed_when: housekeeping_user_scope_script_result.stdout != ""
  when:
    - housekeeping_user_scope_script | length > 0
  tags:
    - housekeeping

- name: Run root-scoped host-specific housekeeping scripts
  ansible.builtin.shell: "{{ housekeeping_root_scope_script }}"
  register: housekeeping_root_scope_script_result
  changed_when: housekeeping_root_scope_script_result.stdout != ""
  become: true
  when:
    - housekeeping_root_scope_script | length > 0
  tags:
    - housekeeping

- name: Flatpak prune
  ansible.builtin.shell:
    cmd: >
      if command -v flatpak >/dev/null 2>&1; then
        flatpak --user uninstall --unused --noninteractive
      else
        echo -n '(skipping)'
      fi
  register: flatpak_user_prune
  changed_when: |
    flatpak_user_prune.stdout != 'Nothing unused to uninstall' and flatpak_user_prune.stdout != '(skipping)'
  tags:
    - housekeeping
    - flatpak-prune

- name: Flatpak prune (system)
  ansible.builtin.shell:
    cmd: >
      if command -v flatpak >/dev/null 2>&1; then
        flatpak --system uninstall --unused --noninteractive
      else
        echo -n '(skipping)'
      fi
  become: true
  register: flatpak_root_prune
  changed_when: |
    flatpak_root_prune.stdout != 'Nothing unused to uninstall' and flatpak_root_prune.stdout != '(skipping)'
  tags:
    - housekeeping
    - flatpak-prune

- name: Podman safe system prune
  ansible.builtin.shell:
    cmd: >
      if command -v podman >/dev/null 2>&1; then
        {{ podman_safe_system_prune_command }}
      else
        echo -n '(skipping)'
      fi
  register: podman_safe_system_user_prune
  changed_when: |
    podman_safe_system_user_prune.stdout != 'Total reclaimed space: 0B' and podman_safe_system_user_prune.stdout != '(skipping)'
  tags:
    - housekeeping
    - podman-prune

- name: Podman safe system prune (root)
  ansible.builtin.shell:
    cmd: >
      if command -v podman >/dev/null 2>&1; then
        {{ podman_safe_system_prune_command }}
      else
        echo -n '(skipping)'
      fi
  register: podman_safe_system_root_prune
  changed_when: |
    podman_safe_system_root_prune.stdout != 'Total reclaimed space: 0B' and podman_safe_system_root_prune.stdout != '(skipping)'
  become: true
  tags:
    - housekeeping
    - podman-prune

- name: Docker safe system prune (root)
  ansible.builtin.shell:
    cmd: >
      if command -v docker >/dev/null 2>&1; then
        {{ docker_safe_system_prune_command }}
      else
        echo -n '(skipping)'
      fi
  register: docker_safe_system_root_prune
  changed_when: |
    docker_safe_system_root_prune.stdout != 'Total reclaimed space: 0B' and docker_safe_system_root_prune.stdout != '(skipping)'
  become: true
  tags:
    - housekeeping
    - docker-prune
